name: "frozen_lake_http_rollout"
description: "Evaluate an agent's ability to navigate a Frozen Lake environment via HTTP rollout"

# Data-driven configuration
dataset_path: "examples/frozen_lake/client/dataset.jsonl"
num_rollouts_per_sample: 1  # This is 'N', the number of rollouts per seed

# Resource configuration - connects to the game server
resource_type: "http_rollout"
base_resource_config:
  base_url: "http://localhost:8080"  # Will be dynamically updated by TaskManager
  timeout: 30.0

# Resource server configuration - automatically managed by TaskManager
resource_server:
  start_command: "python examples/frozen_lake/server/http_rollout_server.py --port {port}"
  health_check_url: "http://localhost:{port}/health"

# Reward function - the only client-side logic needed
reward_function_path: "examples.frozen_lake.client.reward.frozen_lake_reward"

# Initial user message - gets extended with game state from the server
messages:
  - role: "user"
    content: "Start playing the game!"

# Evaluation configuration
poc_max_turns: 3

# Generation configuration
generation:
  enabled: true
  _target_: reward_kit.generation.generate_responses
  model_name: "accounts/fireworks/models/qwen3-235b-a22b"
  temperature: 0.0
  max_new_tokens: 500
  batch_size: 1
  cache:
    enabled: true

# Reward Function Configuration
reward:
  function_path: "examples.frozen_lake.client.reward.frozen_lake_reward"

# Note: The TaskManager will automatically start the server on a free port
# and update the base_url accordingly for parallel execution support
