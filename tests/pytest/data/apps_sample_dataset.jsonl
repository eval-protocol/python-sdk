{"id": 0, "question": "Polycarp has $n$ different binary words. A word called binary if it contains only characters '0' and '1'. For example, these words are binary: \"0001\", \"11\", \"0\" and \"0011100\".\n\nPolycarp wants to offer his set of $n$ binary words to play a game \"words\". In this game, players name words and each next word (starting from the second) must start with the last character of the previous word. The first word can be any. For example, these sequence of words can be named during the game: \"0101\", \"1\", \"10\", \"00\", \"00001\".\n\nWord reversal is the operation of reversing the order of the characters. For example, the word \"0111\" after the reversal becomes \"1110\", the word \"11010\" after the reversal becomes \"01011\".\n\nProbably, Polycarp has such a set of words that there is no way to put them in the order correspondent to the game rules. In this situation, he wants to reverse some words from his set so that:  the final set of $n$ words still contains different words (i.e. all words are unique);  there is a way to put all words of the final set of words in the order so that the final sequence of $n$ words is consistent with the game rules. \n\nPolycarp wants to reverse minimal number of words. Please, help him.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases in the input. Then $t$ test cases follow.\n\nThe first line of a test case contains one integer $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 the number of words in the Polycarp's set. Next $n$ lines contain these words. All of $n$ words aren't empty and contains only characters '0' and '1'. The sum of word lengths doesn't exceed $4\\cdot10^6$. All words are different.\n\nGuaranteed, that the sum of $n$ for all test cases in the input doesn't exceed $2\\cdot10^5$. Also, guaranteed that the sum of word lengths for all test cases in the input doesn't exceed $4\\cdot10^6$.\n\n\n-----Output-----\n\nPrint answer for all of $t$ test cases in the order they appear.\n\nIf there is no answer for the test case, print -1. Otherwise, the first line of the output should contain $k$ ($0 \\le k \\le n$) \u2014 the minimal number of words in the set which should be reversed. The second line of the output should contain $k$ distinct integers \u2014 the indexes of the words in the set which should be reversed. Words are numerated from $1$ to $n$ in the order they appear. If $k=0$ you can skip this line (or you can print an empty line). If there are many answers you can print any of them.\n\n\n-----Example-----\nInput\n4\n4\n0001\n1000\n0011\n0111\n3\n010\n101\n0\n2\n00000\n00001\n4\n01\n001\n0001\n00001\n\nOutput\n1\n3 \n-1\n0\n\n2\n1 2", "solutions": "[\"for _ in range(int(input())):\\n    n = int(input())\\n    mass = []\\n    zo = 0\\n    oz = 0\\n    zz = 0\\n    oo = 0\\n    ozs = []\\n    zos = []\\n    ozss = set()\\n    zoss = set()\\n    for j in range(n):\\n        k = input()\\n        mass.append(k)\\n        if k[0] == '0' and k[-1] == '1':\\n            zoss.add(k)\\n            zos.append(j + 1)\\n            zo += 1\\n        elif k[0] == '1' and k[-1] == '0':\\n            ozss.add(k)\\n            ozs.append(j + 1)\\n            oz += 1\\n        elif k[0] == '0' and k[-1] == '0':\\n            zz += 1\\n        else:\\n            oo += 1\\n    if zz and oo and not oz and not zo:\\n        print(-1)\\n        continue\\n    else:\\n        if zo > oz:\\n            print((zo - oz) // 2)\\n            ans = []\\n            need = (zo - oz) // 2\\n            i = 0\\n            while need:\\n                zzz = mass[zos[i] - 1][len(mass[zos[i] - 1]) - 1:: -1]\\n                if zzz not in ozss:\\n                    ans.append(zos[i])\\n                    need -= 1\\n                i += 1\\n            print(*ans)\\n        else:\\n            print((oz - zo) // 2)\\n            ans = []\\n            need = (oz - zo) // 2\\n            i = 0\\n            while need:\\n                zzz = mass[ozs[i] - 1][len(mass[ozs[i] - 1]) - 1:: -1]\\n                if zzz not in zoss:\\n                    ans.append(ozs[i])\\n                    need -= 1\\n                i += 1\\n            print(*ans)\\n\", \"k = int(input())\\nfor i in range(k):\\n    is_t = set()\\n    a = dict()\\n    a['00'] = []\\n    a['11'] = []\\n    a['01'] = []\\n    a['10'] = []    \\n    n = int(input())\\n    s = []\\n    for i in range(n):\\n        b = input()\\n        a[b[0] + b[-1]].append(i)\\n        s.append(b)\\n        is_t.add(b)\\n    c = len(a['10'])\\n    d = len(a['01'])\\n    if c + d == 0:\\n        if len(a['00']) == 0 or len(a['11']) == 0:\\n            print(0)\\n        else:\\n            print(-1)\\n    elif c > d:\\n        ans = []\\n        i = 0\\n        m = (d + c) // 2\\n        while d != m and i < len(a['10']):\\n            s1 = s[a['10'][i]]\\n            if s1[::-1] not in is_t:\\n                d += 1\\n                ans.append(a['10'][i] + 1)\\n            i += 1\\n        if d != m:\\n            print(-1)\\n        else:\\n            print(len(ans))\\n            print(*ans)\\n    else:\\n        ans = []\\n        i = 0\\n        m = (d + c) // 2\\n        while c != m and i < len(a['01']):\\n            s1 = s[a['01'][i]]\\n            if s1[::-1] not in is_t:\\n                c += 1\\n                ans.append(a['01'][i] + 1)\\n            i += 1\\n        if c != m:\\n            print(-1)\\n        else:\\n            print(len(ans))\\n            print(*ans)\\n\", \"N = int(input())\\n\\ndef ceildiv(x, y):\\n    if x % y == 0:\\n        return x // y\\n    else:\\n        return x // y + 1\\n\\nfor _ in range(N):\\n    doms = []\\n    oc, zc = 0, 0\\n    n = int(input())\\n\\n    used = set()\\n    fulls = dict()\\n\\n    for i in range(n):\\n        d = input()\\n        used.add(d)\\n        if d[0] != d[-1]:\\n            fulls[i] = d\\n            doms.append((i, (d[0], d[-1])))\\n        else:\\n            if d[0] == '0':\\n                zc = 1\\n            else:\\n                oc = 1\\n\\n    if len(doms) == 0:\\n        if zc == 1 and oc == 1:\\n            print(-1)\\n        else:\\n            print(0)\\n    else:\\n        # print(doms)\\n\\n        _01 = 0\\n        _10 = 0\\n\\n        _01_indexes = []\\n        _10_indexes = []\\n\\n\\n        for dom in doms:\\n            if dom[1] == ('0', '1'):\\n                _01 += 1\\n                _01_indexes.append(dom[0])\\n            else:\\n                _10 += 1\\n                _10_indexes.append(dom[0])\\n\\n        if _10 < _01:\\n            _01, _10 = _10, _01\\n            _01_indexes, _10_indexes = _10_indexes, _01_indexes\\n\\n        _10_indexes = [x for x in _10_indexes if fulls[x][::-1] not in used] \\n\\n        need = ceildiv(_10-_01-1, 2)\\n        if len(_10_indexes) >= need:\\n            print(need)\\n            print( ' '.join(list([str(x+1) for x in _10_indexes[:need]])) )\\n        else:\\n            print(-1)\\n\\n    # print(\\\"===\\\")\\n        # print(ceil(abs(doms.count(('0', '1')) - doms.count(('1', '0'))) - 1, 2))\\n\\n\", \"t=int(input())\\nfor _ in range(t):\\n    n=int(input())\\n    k={\\\"01\\\":0,\\\"00\\\":0,\\\"11\\\":0,\\\"10\\\":0}\\n    ab=[]\\n    ba=[]\\n    a=[]\\n    ra=set()\\n    rb=set()\\n    for i in range(n):\\n        s=input()\\n        ts=s[0]+s[-1]\\n        k[ts]+=1\\n        if ts==\\\"01\\\":\\n            ab.append([str(i+1),s])\\n            ra.add(s)\\n        if ts==\\\"10\\\":\\n            ba.append([str(i+1),s])\\n            rb.add(s)\\n    if k[\\\"01\\\"]==0 and k[\\\"10\\\"]==0 and k[\\\"00\\\"]>0 and k[\\\"11\\\"]>0:\\n        ans=-1\\n    else:\\n        if k[\\\"01\\\"]==k[\\\"10\\\"] or k[\\\"01\\\"]==k[\\\"10\\\"]+1 or k[\\\"01\\\"]==k[\\\"10\\\"]-1:\\n            ans=0\\n        else:\\n            m=(k[\\\"01\\\"]+k[\\\"10\\\"])//2 if (k[\\\"01\\\"]+k[\\\"10\\\"])%2==0 else (k[\\\"01\\\"]+k[\\\"10\\\"])//2+1\\n            if k[\\\"01\\\"]>m:\\n                ans=k[\\\"01\\\"]-m\\n                for i in range(len(ab)):\\n                    psp=ab[i][1]\\n                    nn=list(psp)\\n                    nn.reverse()\\n                    psp=\\\"\\\".join(nn)\\n                    c1=len(rb)\\n                    rb.add(psp)\\n                    c2=len(rb)\\n                    if c1!=c2:\\n                        a.append(ab[i][0])\\n                if len(a)>=ans:\\n                    a=a[:ans]\\n                else:\\n                    ans=-1\\n            else:\\n                ans=k[\\\"10\\\"]-m\\n                for i in range(len(ba)):\\n                    psp=ba[i][1]\\n                    nn=list(psp)\\n                    nn.reverse()\\n                    psp=\\\"\\\".join(nn)\\n                    c1=len(ra)\\n                    ra.add(psp)\\n                    c2=len(ra)\\n                    if c1!=c2:\\n                        a.append(ba[i][0])\\n                if len(a)>=ans:\\n                    a=a[:ans]\\n                else:\\n                    ans=-1\\n    print(ans)\\n    if ans>0:\\n        print(\\\" \\\".join(a))\\n\", \"t=int(input())\\nfor i in range(t):\\n    n=int(input())\\n    i0,i1=[],[]\\n    l0,l1=[],[]\\n    h0,h1=False,False\\n    for i in range(n):\\n        t=input()\\n        if t[0]=='0' and t[-1]=='1':\\n            i0.append(i)\\n            l0.append(t)\\n        elif t[0]=='1' and t[-1]=='0':\\n            i1.append(i)\\n            l1.append(t)\\n        elif t[0]==t[-1]=='1':\\n            h1=True\\n        elif t[0]==t[-1]=='0':\\n            h0=True\\n    c0,c1=len(l0),len(l1)\\n    req,sl=0,[]\\n    s0=set(l0)\\n    s1=set(l1)\\n    if c0>0 or c1>0:\\n        if c0-c1>1:\\n            req=(c0-c1)//2\\n            sel=0\\n            sl=[]\\n            for tt in range(len(l0)):\\n                t=l0[tt]\\n                if not t[::-1] in s1:\\n                    req-=1\\n                    sl.append(i0[tt]+1)\\n                if req==0:\\n                    break\\n        elif c1-c0>1:\\n            req=(c1-c0)//2\\n            sel=0\\n            sl=[]\\n            for tt in range(len(l1)):\\n                t=l1[tt]\\n                if not t[::-1] in s0:\\n                    req-=1\\n                    sl.append(i1[tt]+1)\\n                if req==0:\\n                    break\\n        if req>0:\\n            print(-1)\\n        else:\\n            print(len(sl))\\n            print(*sl)\\n    else:\\n        if h0 and h1:\\n            print(-1)\\n        else:\\n            print(0)\\n            print(*[])\\n\"]", "input_output": "{\n  \"inputs\": [\n    \"4\\n4\\n0001\\n1000\\n0011\\n0111\\n3\\n010\\n101\\n0\\n2\\n00000\\n00001\\n4\\n01\\n001\\n0001\\n00001\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n3 \\n-1\\n0\\n\\n2\\n1 2 \\n\"\n  ]\n}", "difficulty": "interview", "url": "https://codeforces.com/problemset/problem/1259/D", "starter_code": ""}
{"id": 1, "question": "Mikhail walks on a Cartesian plane. He starts at the point $(0, 0)$, and in one move he can go to any of eight adjacent points. For example, if Mikhail is currently at the point $(0, 0)$, he can go to any of the following points in one move:   $(1, 0)$;  $(1, 1)$;  $(0, 1)$;  $(-1, 1)$;  $(-1, 0)$;  $(-1, -1)$;  $(0, -1)$;  $(1, -1)$. \n\nIf Mikhail goes from the point $(x1, y1)$ to the point $(x2, y2)$ in one move, and $x1 \\ne x2$ and $y1 \\ne y2$, then such a move is called a diagonal move.\n\nMikhail has $q$ queries. For the $i$-th query Mikhail's target is to go to the point $(n_i, m_i)$ from the point $(0, 0)$ in exactly $k_i$ moves. Among all possible movements he want to choose one with the maximum number of diagonal moves. Your task is to find the maximum number of diagonal moves or find that it is impossible to go from the point $(0, 0)$ to the point $(n_i, m_i)$ in $k_i$ moves.\n\nNote that Mikhail can visit any point any number of times (even the destination point!).\n\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 10^4$) \u2014 the number of queries.\n\nThen $q$ lines follow. The $i$-th of these $q$ lines contains three integers $n_i$, $m_i$ and $k_i$ ($1 \\le n_i, m_i, k_i \\le 10^{18}$) \u2014 $x$-coordinate of the destination point of the query, $y$-coordinate of the destination point of the query and the number of moves in the query, correspondingly.\n\n\n-----Output-----\n\nPrint $q$ integers. The $i$-th integer should be equal to -1 if Mikhail cannot go from the point $(0, 0)$ to the point $(n_i, m_i)$ in exactly $k_i$ moves described above. Otherwise the $i$-th integer should be equal to the the maximum number of diagonal moves among all possible movements.\n\n\n-----Example-----\nInput\n3\n2 2 3\n4 3 7\n10 1 9\n\nOutput\n1\n6\n-1\n\n\n\n-----Note-----\n\nOne of the possible answers to the first test case: $(0, 0) \\to (1, 0) \\to (1, 1) \\to (2, 2)$.\n\nOne of the possible answers to the second test case: $(0, 0) \\to (0, 1) \\to (1, 2) \\to (0, 3) \\to (1, 4) \\to (2, 3) \\to (3, 2) \\to (4, 3)$.\n\nIn the third test case Mikhail cannot reach the point $(10, 1)$ in 9 moves.", "solutions": "[\"q=int(input())\\n\\nfor e in range(q):\\n    x,y,k=list(map(int,input().split()))\\n    x,y=abs(x),abs(y)\\n    x,y=max(x,y),min(x,y)\\n    \\n    if(x%2!=k%2):\\n        k-=1\\n        y-=1\\n    \\n    \\n    if(x>k):\\n        print(-1)\\n        continue\\n    if((x-y)%2):\\n        k-=1\\n        x-=1\\n    print(k)\\n    \\n    \\n    \\n\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\ndef getIntList():\\n    return list(map(int, input().split()))    \\n\\ntry :\\n    #raise ModuleNotFoundError\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        print(*args, **kwargs, file=sys.stderr)\\n    dprint('debug mode')\\nexcept ModuleNotFoundError:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\n\\ninId = 0\\noutId = 0\\nif inId>0:\\n    dprint('use input', inId)\\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\nif outId>0:\\n    dprint('use output', outId)\\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n    atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n    \\nQ, = getIntList()\\nfor _ in range(Q):\\n    N, M, K  = getIntList()\\n    if max(N,M) >K:\\n        print(-1)\\n        continue\\n    r = K\\n    if N%2!= K%2:\\n        r-=1\\n    if M%2!= K%2:\\n        r-=1\\n    print(r)\\n\\n\\n\\n\\n\\n\\n\", \"q = int(input())\\nfor i in range(q):\\n    x, y, k = list(map(int, input().split()))\\n    if x > y: x, y = y, x\\n    m = y\\n    d = y\\n    if (y - x) % 2 == 1:\\n        d -= 1\\n    if k < m:\\n        print(-1)\\n        continue\\n    r = k - m\\n    if r % 2 != 0:\\n        r -= 1\\n        if d != m:\\n            d += 1\\n        else:\\n            d -= 1\\n    d += r\\n    print(d)\\n\", \"q = int(input())\\notvet = []\\nfor i in range(q):\\n    g = input().split()\\n    n = int(g[0])\\n    m = int(g[1])\\n    k = int(g[2])\\n    if n < 0:\\n        n = -n\\n    if m < 0:\\n        m = -m\\n    if m > k or n > k:\\n        otvet.append(-1)\\n    elif m % 2 == k % 2 and n % 2 == k % 2:\\n        otvet.append(k)\\n    elif m % 2 == k % 2 or n % 2 == k % 2:\\n        otvet.append(k - 1)\\n    else:\\n        otvet.append(k - 2)\\nfor i in otvet:\\n    print(i)\\n\", \"q = int(input())\\nfor i in range(q):\\n    a, b, k = list(map(int, input().split()))\\n    if a < b:\\n        a, b, = b, a\\n    if a > k:\\n        print(-1)\\n    elif a % 2 == b % 2 != k % 2:\\n        print(k - 2)\\n    elif (a + b) % 2 != 0:\\n        print(k - 1)\\n    else:\\n        print(k)\\n\", \"q = int(input())\\nfor i in range(q):\\n    n, m, k = list(map(int, input().split()))\\n    m, n = abs(m), abs(n)\\n    mx = max(m, n)\\n    remaining = k - mx\\n    if remaining < 0:\\n        print(-1)\\n    elif m == n == 0:\\n        if k == 1:\\n            print(-1)\\n        elif k % 2:\\n            print(k - 1)\\n        else:\\n            print(k)\\n    elif abs(m - n) % 2 == 0:\\n        if remaining % 2 == 0:\\n            print(k)\\n        else:\\n            print(k - 2)\\n    else:\\n        if not remaining:\\n            print(k - 1)\\n        elif remaining % 2 == 0:\\n            print(k - 1)\\n        else:\\n            print(k - 1)\\n\", \"from collections import deque\\nfrom sys import stdin\\nlines = deque(line.strip() for line in stdin.readlines())\\n\\ndef nextline():\\n    return lines.popleft()\\n\\ndef types(cast, sep=None):\\n    return tuple(cast(x) for x in strs(sep=sep))\\n\\ndef ints(sep=None):\\n    return types(int, sep=sep)\\n\\ndef strs(sep=None):\\n    return tuple(nextline()) if sep == '' else tuple(nextline().split(sep=sep))\\n\\ndef main():\\n    # lines will now contain all of the input's lines in a list\\n    T = int(nextline())\\n    for testCase in range(1, T + 1):\\n        n, m, k = ints()\\n        min_k = max(n, m)\\n        if min_k > k:\\n            print(-1)\\n            continue\\n        if (n - m) % 2 == 0:\\n            if k % 2 == n % 2:\\n                print(k)\\n                continue\\n            print(k - 2)\\n            continue\\n        print(k - 1)\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"\\n\\nq = int(input())\\n\\nfor _ in range(q):\\n    n, m, k = list(map(int, input().split()))\\n    if max([n, m]) > k:\\n        print(-1)\\n    else:\\n        if (n + m) % 2 == 0:\\n            if max([n, m]) % 2 != k % 2:\\n                print(k - 2)\\n            else:\\n                print(k)\\n        else:\\n            print((k - 1));\\n\", \"import math\\n\\nq = int(input())\\n\\nfor i in range(q):\\n    x, y, k = map(int, input().split())\\n    if x > k or y > k:\\n        print(-1)\\n    else:\\n        if (x+y)%2 == 0:\\n            if (k-max(x,y)) % 2 == 0:\\n                print(k)\\n            else:\\n                print(k - 2)\\n        else:\\n            if (k-max(x,y)) % 2 == 0:\\n                print(k-1)\\n            else:\\n                print(k-1)\", \"q = int(input())\\n\\nfor _ in range(q):\\n    n, m, k = list(map(int, input().split()))\\n    if k == 0:\\n        if n == 0 and m == 0:\\n            print(0)\\n        else:\\n            print(-1)\\n    elif k == 1:\\n        if max(abs(n), abs(m)) != 1:\\n            print(-1)\\n        elif abs(n) == abs(m) == 1:\\n            print(1)\\n        else:\\n            print(0)\\n    else:\\n        if max(abs(n), abs(m)) > k:\\n            print(-1)\\n        elif abs(n) == abs(m):\\n            if (k - abs(n)) % 2 == 0:\\n                print(k)\\n            else:\\n                print(k - 2)\\n        elif (max(abs(n), abs(m)) - min(abs(n), abs(m))) % 2 == 0:\\n            if (k - max(abs(n), abs(m))) % 2 == 0:\\n                print(k)\\n            else:\\n                print(k - 2)\\n        else:\\n            print(k - 1)\\n\\n\\n\\n\", \"\\nimport sys\\n#sys.stdin=open(\\\"data.txt\\\")\\ninput=sys.stdin.readline\\n\\nfor _ in range(int(input())):\\n    n,m,k=list(map(int,input().split()))\\n    n=abs(n)\\n    m=abs(m)\\n    if max(n,m)>k:\\n        print(\\\"-1\\\")\\n    else:\\n        # you can't 0 0 1 me :D\\n        bad1=((n+k)%2==1)\\n        bad2=((m+k)%2==1)\\n        print(k-bad1-bad2)\\n\", \"USE_STDIO = False\\n\\nif not USE_STDIO:\\n    try: import mypc\\n    except: pass\\n\\ndef main():\\n    q,  = list(map(int, input().split(' ')))\\n    for _ in range(q):\\n        n, m, k = list(map(int, input().split(' ')))\\n        if n > k or m > k:\\n            print(-1)\\n        elif (n - m) % 2:\\n            print(k - 1)\\n        elif (n - k) % 2:\\n            print(k - 2)\\n        else:\\n            print(k)\\n\\ndef __starting_point():\\n    main()\\n\\n\\n\\n\\n__starting_point()\", \"q=int(input())\\n\\nQ=[list(map(int,input().split())) for i in range(q)]\\n\\nfor n,m,k in Q:\\n    if n>k or m>k:\\n        print(-1)\\n        continue\\n\\n    x=max(n,m)-min(n,m)\\n    y=k-max(n,m)\\n\\n    if x%2==0 and y%2==0:\\n        print(k)\\n    elif x%2==0 and y%2==1:\\n        print(k-2)\\n    elif x%2==1 and y%2==0:\\n        print(k-1)\\n    elif x%2==1 and y%2==1:\\n        print(k-1)\\n\", \"n = int(input())\\nfor i in range(n):\\n    a, b, c = [int(el) for el in input().split()]\\n    if ( a > c or b > c):\\n        print(-1)\\n    else:\\n        if (a% 2 + b % 2 == 1):\\n            print(c - 1)\\n        elif (a%2 == b%2 == c%2):\\n            print(c)\\n        else:\\n            print(c - 2)\\n\", \"Q = int(input())\\nsrc = [tuple(map(int,input().split())) for i in range(Q)]\\nans = []\\nfor x,y,k in src:\\n    d = max(x,y)\\n    if (x+y)%2:\\n        ans.append(-1 if d > k else k-1)\\n    else:\\n        if d > k:\\n            ans.append(-1)\\n        else:\\n            ans.append(k-2 if (d+k)%2 else k)\\n\\nprint(*ans,sep='\\\\n')\\n\", \"def m():\\n\\t[x, y, k] = [int(i) for i in input().split()]\\n\\td=min(x, y)\\n\\tx-=d\\n\\ty-=d\\n\\tk-=d\\n\\t\\n\\tif k-x-y<0:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tx+=y\\n\\t\\tif x%2 > 0 and k%2>0:\\n\\t\\t\\tprint(d+k-1)\\n\\t\\telif x%2 >0:\\n\\t\\t\\tprint(d+k-1)\\n\\t\\telif k%2>0:\\n\\t\\t\\tprint(d+k-2)\\n\\t\\telse:\\n\\t\\t\\tprint(d+k)\\n\\t\\t\\t\\n\\t\\t\\n\\t\\t\\t\\n\\t\\nn=int(input())\\nfor i in range(n):\\n\\tm()\", \"q = int(input())\\n\\nfor i in range(q):\\n    (x, y, k) = list(map(int, input().split()))\\n\\n    if max(x, y) > k:\\n        print(-1)\\n    elif x == y and k == x + 1:\\n        print(k - 2)\\n        continue\\n    elif x % 2 == 1 and y % 2 == 1 and k % 2 == 0:\\n        print(k - 2)\\n        continue\\n    elif x % 2 == 0 and y % 2 == 0 and k % 2 == 1:\\n        print(k - 2)\\n        continue\\n    elif (x + y) % 2 == 0:\\n        print(k)\\n    else:\\n        print(k - 1)\\n\", \"n = int(input())\\nfor q in range(n):\\n    x, y, k = list(map(int, input().split()))\\n    if max(x, y) > k:\\n        print(-1)\\n    else:\\n        if 0 == (x + y) % 2:\\n            if k % 2 == max(x, y) % 2:\\n                print(k)\\n            else:\\n                print(k - 2)\\n        else:\\n            print(k - 1)\\n\", \"def go():\\n    n = int(input())\\n    for i in range(n):\\n        a, b, d = [int(i) for i in input().split(' ')]\\n        if a > d or b > d:\\n            print(-1)\\n        elif a % 2 == b % 2:\\n            if a % 2 == d % 2:\\n                print(d)\\n            else:\\n                print(d - 2)\\n        else:\\n            if a % 2 == b % 2:\\n                if d % 2 == a % 2:\\n                    print(d)\\n                else:\\n                    print(d - 2)\\n            else:\\n                print(d - 1)\\ngo()\\n\", \"q = int(input())\\n\\nfor i in range(q):\\n    n, m, k = map(int, input().split())\\n    p = min(m, n)\\n    r = max(n, m) - p\\n    if (p+r) > k:\\n        print(-1)\\n    elif r % 2 == 1:\\n        print(k - 1)\\n    elif (k - p) % 2 == 0:\\n        print(k)\\n    else:\\n        print(k - 2)\", \"q = int(input())\\nfor i in range(q):\\n\\tn, m, k = map(int, input().split())\\n\\tost = max(n, m) - min(n, m)\\n\\tplus = 0\\n\\tif ost % 2 != 0:\\n\\t\\tplus = 1\\n\\t\\tost -= 1\\n\\tmini = min(n, m) + ost + plus\\n\\t#print('mini: ' + str(mini))\\n\\tif k < mini:\\n\\t\\tprint(-1)\\n\\telif (k - mini) % 2 == 0 or plus == 1:\\n\\t\\tprint(k - plus)\\n\\telse:\\n\\t\\tprint(k - plus - 2)\\t\", \"q=int(input())\\n\\nfor i in range(q):\\n\\tn,m,k=list(map(int,input().split()))\\n\\n\\tif n>k or m>k:\\n\\t\\tprint(-1)\\n\\n\\telse:\\n\\t\\tif n%2==0 and m%2==0:\\n\\t\\t\\tif k%2==0:\\n\\t\\t\\t\\tprint(k)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(k-2)\\n\\n\\t\\telif (n%2==0 and m%2==1) or (n%2==1 and m%2==0):\\n\\t\\t\\tprint(k-1)\\n\\n\\t\\telif n%2==1 and m%2==1:\\n\\t\\t\\tif k%2==0:\\n\\t\\t\\t\\tprint(k-2)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(k)\\n\", \"q=int(input())\\nfor i in range(q):\\n    n, m, k = map(int, input().split())\\n    ans=max(n,m)\\n    diff=k-ans\\n    if diff<0:\\n        print(-1)\\n    else:\\n        if (n%2==0 and m%2==0) or (n%2!=0 and m%2!=0):\\n            if diff%2==0:\\n                ans+=diff\\n            else:\\n                ans+=diff-2\\n        else:\\n            ans+=diff-1\\n        print(ans)\", \"\\\"\\\"\\\"\\nKA      YM        KA        AS      KA  ASKA      YASK        KA         SKAYMA   \\nKA    KA         SKAY        SK    SK   AS AY    AY SK       SKAY       AS    AS  \\nKA  AS          AS  YM        KA  AS    AS  YM  KA  SK      AS  YM      AS        \\nKAYM           MA    MA        AYMA     AS   MASK   SK     MA    MA      SKAYMA   \\nKA  AS        YMASKAYMAS        YM      AS    AS    SK    YMASKAYMAS          AS  \\nKA    KA     AY        SK       YM      AS          SK   AY        SK   AS    AS  \\nKA      YM  KA          KA      YM      AS          SK  KA          KA   SKAYMA   \\n\\\"\\\"\\\"\\nn=int(input())\\nfor i in range(n):\\n\\tx,y,k=map(int,input().split())\\n\\tx,y=abs(x),abs(y)\\n\\tmin_moves=max(x,y)\\n\\tif min_moves>k:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tans=min(x,y)\\n\\t\\tx-=ans\\n\\t\\ty-=ans\\n\\t\\tp=max(x,y)\\n\\t\\tk-=ans\\n\\t\\tif k==p and p%2==0:\\n\\t\\t\\tprint(ans+k)\\n\\t\\telif k==p and p%2==1:\\n\\t\\t\\tprint(ans+k-1)\\n\\t\\telif p%2==0 and k%2==0:\\n\\t\\t\\tprint(ans+k)\\n\\t\\telif p%2==0 and k%2==1:\\n\\t\\t\\tprint(ans+k-2)\\n\\t\\telif p%2==1:\\n\\t\\t\\tprint(ans+k-1)\"]", "input_output": "{\n  \"inputs\": [\n    \"3\\n2 2 3\\n4 3 7\\n10 1 9\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n6\\n-1\\n\"\n  ]\n}", "difficulty": "interview", "url": "https://codeforces.com/problemset/problem/1036/B", "starter_code": ""}
{"id": 2, "question": "You are given three sequences: $a_1, a_2, \\ldots, a_n$; $b_1, b_2, \\ldots, b_n$; $c_1, c_2, \\ldots, c_n$.\n\nFor each $i$, $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$.\n\nFind a sequence $p_1, p_2, \\ldots, p_n$, that satisfy the following conditions:\n\n\n\n $p_i \\in \\{a_i, b_i, c_i\\}$\n\n $p_i \\neq p_{(i \\mod n) + 1}$.\n\nIn other words, for each element, you need to choose one of the three possible values, such that no two adjacent elements (where we consider elements $i,i+1$ adjacent for $i<n$ and also elements $1$ and $n$) will have equal value.\n\nIt can be proved that in the given constraints solution always exists. You don't need to minimize/maximize anything, you need to find any proper sequence.\n\n\n-----Input-----\n\nThe first line of input contains one integer $t$ ($1 \\leq t \\leq 100$): the number of test cases.\n\nThe first line of each test case contains one integer $n$ ($3 \\leq n \\leq 100$): the number of elements in the given sequences.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 100$).\n\nThe third line contains $n$ integers $b_1, b_2, \\ldots, b_n$ ($1 \\leq b_i \\leq 100$).\n\nThe fourth line contains $n$ integers $c_1, c_2, \\ldots, c_n$ ($1 \\leq c_i \\leq 100$).\n\nIt is guaranteed that $a_i \\neq b_i$, $a_i \\neq c_i$, $b_i \\neq c_i$ for all $i$.\n\n\n-----Output-----\n\nFor each test case, print $n$ integers: $p_1, p_2, \\ldots, p_n$ ($p_i \\in \\{a_i, b_i, c_i\\}$, $p_i \\neq p_{i \\mod n + 1}$).\n\nIf there are several solutions, you can print any.\n\n\n-----Example-----\nInput\n5\n3\n1 1 1\n2 2 2\n3 3 3\n4\n1 2 1 2\n2 1 2 1\n3 4 3 4\n7\n1 3 3 1 1 1 1\n2 4 4 3 2 2 4\n4 2 2 2 4 4 2\n3\n1 2 1\n2 3 3\n3 1 2\n10\n1 1 1 2 2 2 3 3 3 1\n2 2 2 3 3 3 1 1 1 2\n3 3 3 1 1 1 2 2 2 3\n\nOutput\n1 2 3\n1 2 1 2\n1 3 4 3 2 4 2\n1 3 2\n1 2 3 1 2 3 1 2 3 2\n\n\n\n-----Note-----\n\nIn the first test case $p = [1, 2, 3]$.\n\nIt is a correct answer, because:\n\n  $p_1 = 1 = a_1$, $p_2 = 2 = b_2$, $p_3 = 3 = c_3$  $p_1 \\neq p_2 $, $p_2 \\neq p_3 $, $p_3 \\neq p_1$ \n\nAll possible correct answers to this test case are: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$.\n\nIn the second test case $p = [1, 2, 1, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = a_3$, $p_4 = a_4$. Also we can see, that no two adjacent elements of the sequence are equal.\n\nIn the third test case $p = [1, 3, 4, 3, 2, 4, 2]$.\n\nIn this sequence $p_1 = a_1$, $p_2 = a_2$, $p_3 = b_3$, $p_4 = b_4$, $p_5 = b_5$, $p_6 = c_6$, $p_7 = c_7$. Also we can see, that no two adjacent elements of the sequence are equal.", "solutions": "[\"import sys\\nimport random\\nfrom fractions import Fraction\\nfrom math import *\\n \\ndef input():\\n    return sys.stdin.readline().strip()\\n \\ndef iinput():\\n    return int(input())\\n\\ndef finput():\\n    return float(input())\\n\\ndef tinput():\\n    return input().split()\\n\\ndef linput():\\n    return list(input())\\n \\ndef rinput():\\n    return list(map(int, tinput()))\\n\\ndef fiinput():\\n    return list(map(float, tinput()))\\n \\ndef rlinput():\\n    return list(map(int, input().split()))\\ndef trinput():\\n    return tuple(rinput())\\n\\ndef srlinput():\\n    return sorted(list(map(int, input().split())))\\n\\ndef NOYES(fl):\\n    if fl:\\n        print(\\\"NO\\\")\\n    else:\\n        print(\\\"YES\\\")\\ndef YESNO(fl):\\n    if fl:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n    \\ndef main():\\n    n = iinput()\\n    #k = iinput() \\n    #m = iinput() \\n    #n = int(sys.stdin.readline().strip()) \\n    #n, k = rinput()\\n    #n, m = rinput()\\n    #m, k = rinput()\\n    #n, k, m = rinput()\\n    #n, m, k = rinput()\\n    #k, n, m = rinput()\\n    #k, m, n = rinput() \\n    #m, k, n = rinput()\\n    #m, n, k = rinput()\\n    q = [rlinput(), rlinput(), rlinput()]\\n    #q = linput()\\n    ans = q[0].copy()\\n    for i in range(1, n):\\n        if ans[i] == ans[i - 1]:\\n            ans[i] = q[1][i]\\n        if i == n - 1:\\n            o = 0\\n            while q[o][i] == ans[n - 2] or q[o][i] == ans[0]:\\n                o += 1\\n            ans[i] = q[o][i]\\n    print(*ans)\\n\\n        \\n\\n            \\n        \\n    \\n                \\n    \\n    \\n    \\n            \\n    \\n        \\n    \\n\\nfor i in range(iinput()):\\n    main()\\n\", \"for _ in range(int(input())):\\n  n=int(input())\\n  a=list(map(int,input().split()))\\n  b=list(map(int,input().split()))\\n  c=list(map(int,input().split()))\\n  p=a\\n  for i in range(n):\\n    if p[i]==p[(i+1)%n]:\\n      if p[i]!=b[i] and p[(i-1)%n]!=b[i]:p[i]=b[i]\\n      else:p[i]=c[i]\\n  print(*p)\", \"for __ in range(int(input())):\\n    n = int(input())\\n    ar1 = list(map(int, input().split()))\\n    ar2 = list(map(int, input().split()))\\n    ar3 = list(map(int, input().split()))\\n    ans = [ar1[0]]\\n    for i in range(1, n - 1):\\n        if ar1[i] != ans[-1]:\\n            ans.append(ar1[i])\\n        elif ar2[i] != ans[-1]:\\n            ans.append(ar2[i])\\n        elif ar3[i] != ans[-1]:\\n            ans.append(ar3[i])\\n    if ar1[-1] != ans[-1] and ar1[-1] != ans[0]:\\n        ans.append(ar1[-1])\\n    elif ar2[-1] != ans[-1] and ar2[-1] != ans[0]:\\n        ans.append(ar2[-1])\\n    elif ar3[-1] != ans[-1] and ar3[-1] != ans[0]:\\n        ans.append(ar3[-1])\\n    print(*ans)\", \"T = int(input())\\n\\nfor t in range(T):\\n    N = int(input())\\n    A = [int(_) for _ in input().split()]\\n    B = [int(_) for _ in input().split()]\\n    C = [int(_) for _ in input().split()]\\n\\n    R = []\\n\\n    for i in range(N):\\n        if i == 0:\\n            R.append(A[i])\\n            continue\\n        if i == N-1:\\n            if A[i] != R[0] and A[i] != R[-1]:\\n                R.append(A[i])\\n            elif B[i] != R[0] and B[i] != R[-1]:\\n                R.append(B[i])\\n            else:\\n                R.append(C[i])\\n            continue\\n\\n        if A[i] != R[-1]:\\n            R.append(A[i])\\n        else:\\n            R.append(B[i])\\n\\n    print(' '.join(map(str, R)))\\n\", \"gans = []\\nfor _ in range(int(input())):\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    b = list(map(int, input().split()))\\n    c = list(map(int, input().split()))\\n    ans = [a[0]]\\n    for i in range(1, n - 1):\\n        if a[i] != ans[i - 1]:\\n            ans.append(a[i])\\n        else:\\n            ans.append(b[i])\\n    if a[-1] != ans[-1] and a[-1] != ans[0]:\\n        ans.append(a[-1])\\n    elif b[-1] != ans[-1] and b[-1] != ans[0]:\\n        ans.append(b[-1])\\n    else:\\n        ans.append(c[-1])\\n    gans.append(' '.join(map(str, ans)))\\nprint('\\\\n'.join(gans))\\n\", \"from math import *\\nfrom bisect import *\\nfrom collections import *\\nfrom random import *\\nfrom decimal import *\\nimport sys\\ninput=sys.stdin.readline\\ndef inp():\\n    return int(input())\\ndef st():\\n    return input().rstrip('\\\\n')\\ndef lis():\\n    return list(map(int,input().split()))\\ndef ma():\\n    return list(map(int,input().split()))\\nt=inp()\\nwhile(t):\\n    t-=1\\n    n=inp()\\n    a=lis()\\n    b=lis()\\n    c=lis()\\n    r=[a[0]]\\n    for i in range(1,n):\\n        if(i==n-1):\\n            if(a[i]!=r[0] and a[i]!=r[-1]):\\n                r.append(a[i])\\n                continue\\n            if(b[i]!=r[0] and b[i]!=r[-1]):\\n                r.append(b[i])\\n                continue\\n            if(c[i]!=r[0] and c[i]!=r[-1]):\\n                r.append(c[i])\\n                continue\\n        if(a[i]!=r[-1]):\\n            r.append(a[i])\\n            continue\\n        if(b[i]!=r[-1]):\\n            r.append(b[i])\\n            continue\\n        if(c[i]!=r[-1]):\\n            r.append(c[i])\\n            continue\\n    print(*r)\\n        \\n        \\n        \\n\"]", "input_output": "{\n  \"inputs\": [\n    \"5\\n3\\n1 1 1\\n2 2 2\\n3 3 3\\n4\\n1 2 1 2\\n2 1 2 1\\n3 4 3 4\\n7\\n1 3 3 1 1 1 1\\n2 4 4 3 2 2 4\\n4 2 2 2 4 4 2\\n3\\n1 2 1\\n2 3 3\\n3 1 2\\n10\\n1 1 1 2 2 2 3 3 3 1\\n2 2 2 3 3 3 1 1 1 2\\n3 3 3 1 1 1 2 2 2 3\\n\"\n  ],\n  \"outputs\": [\n    \"1 2 3\\n1 2 1 2\\n1 3 4 1 2 1 4\\n1 2 3\\n1 2 1 2 3 2 3 1 3 2\\n\"\n  ]\n}", "difficulty": "interview", "url": "https://codeforces.com/problemset/problem/1408/A", "starter_code": ""}
